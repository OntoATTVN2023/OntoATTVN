from owlready2 import *
# Initialize Defense
D3_FA = Detect("D3_FA")
D3_FA.hasID.append("D3-FA")
D3_FA.hasName.append("File Analysis")
D3_FA.hasDescription.append("File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc.")
D3_DA = Detect("D3_DA")
D3_DA.hasID.append("D3-DA")
D3_DA.hasName.append("Dynamic Analysis")
D3_DA.hasDescription.append("Executing or opening a file in a synthetic 'sandbox' environment to determine if the file is a malicious program or if the file exploits another program such as a document reader.")
D3_EFA = Detect("D3_EFA")
D3_EFA.hasID.append("D3-EFA")
D3_EFA.hasName.append("Emulated File Analysis")
D3_EFA.hasDescription.append("Emulating instructions in a file looking for specific patterns.")
D3_FCOA = Detect("D3_FCOA")
D3_FCOA.hasID.append("D3-FCOA")
D3_FCOA.hasName.append("File Content Analysis")
D3_FCOA.hasDescription.append("Employing a pattern matching algorithm to statically analyze the content of files.")
D3_FCR = Detect("D3_FCR")
D3_FCR.hasID.append("D3-FCR")
D3_FCR.hasName.append("File Content Rules")
D3_FCR.hasDescription.append("Employing a pattern matching rule language to analyze the content of files.")
D3_FH = Detect("D3_FH")
D3_FH.hasID.append("D3-FH")
D3_FH.hasName.append("File Hashing")
D3_FH.hasDescription.append("Employing file hash comparisons to detect known malware.")
D3_ID = Detect("D3_ID")
D3_ID.hasID.append("D3-ID")
D3_ID.hasName.append("Identifier Analysis")
D3_ID.hasDescription.append("Analyzing identifier artifacts such as IP address, domain names, or URL(I)s.")
D3_HD = Detect("D3_HD")
D3_HD.hasID.append("D3-HD")
D3_HD.hasName.append("Homoglyph Detection")
D3_HD.hasDescription.append("Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user.")
D3_IAA = Detect("D3_IAA")
D3_IAA.hasID.append("D3-IAA")
D3_IAA.hasName.append("Identifier Activity Analysis")
D3_IAA.hasDescription.append("Taking known malicious identifiers and determining if they are present in a system.")
D3_IRA = Detect("D3_IRA")
D3_IRA.hasID.append("D3-IRA")
D3_IRA.hasName.append("Identifier Reputation Analysis")
D3_IRA.hasDescription.append("Analyzing the reputation of an identifier.")
D3_URA = Detect("D3_URA")
D3_URA.hasID.append("D3-URA")
D3_URA.hasName.append("URL Reputation Analysis")
D3_URA.hasDescription.append("Analyzing the reputation of a URL.")
D3_UA = Detect("D3_UA")
D3_UA.hasID.append("D3-UA")
D3_UA.hasName.append("URL Analysis")
D3_UA.hasDescription.append("Determining if a URL is benign or malicious by analyzing the URL or its components.")
D3_MA = Detect("D3_MA")
D3_MA.hasID.append("D3-MA")
D3_MA.hasName.append("Message Analysis")
D3_MA.hasDescription.append("Analyzing email or instant message content to detect unauthorized activity.")
D3_SMRA = Detect("D3_SMRA")
D3_SMRA.hasID.append("D3-SMRA")
D3_SMRA.hasName.append("Sender MTA Reputation Analysis")
D3_SMRA.hasDescription.append("Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails.")
D3_SRA = Detect("D3_SRA")
D3_SRA.hasID.append("D3-SRA")
D3_SRA.hasName.append("Sender Reputation Analysis")
D3_SRA.hasDescription.append("Ascertaining sender reputation based on information associated with a message (e.g. email/instant messaging).")
D3_NTA = Detect("D3_NTA")
D3_NTA.hasID.append("D3-NTA")
D3_NTA.hasName.append("Network Traffic Analysis")
D3_NTA.hasDescription.append("Analyzing intercepted or summarized computer network traffic to detect unauthorized activity.")      
D3_ANAA = Detect("D3_ANAA")
D3_ANAA.hasID.append("D3-ANAA")
D3_ANAA.hasName.append("Administrative Network Activity Analysis")
D3_ANAA.hasDescription.append("Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline.")
D3_CA = Detect("D3_CA")
D3_CA.hasID.append("D3-CA")
D3_CA.hasName.append("Certificate Analysis")
D3_CA.hasDescription.append("Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.")
D3_ACA = Detect("D3_ACA")
D3_ACA.hasID.append("D3-ACA")
D3_ACA.hasName.append("Active Certificate Analysis")
D3_ACA.hasDescription.append("Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis.")
D3_PCA = Detect("D3_PCA")
D3_PCA.hasID.append("D3-PCA")
D3_PCA.hasName.append("Passive Certificate Analysis")
D3_PCA.hasDescription.append("Collecting host certificates from network traffic or other passive sources like a certificate transparency log and analyzing them for unauthorized activity.")
D3_CSPP = Detect("D3_CSPP")
D3_CSPP.hasID.append("D3-CSPP")
D3_CSPP.hasName.append("Client-server Payload Profiling")
D3_CSPP.hasDescription.append("Passively collecting certificates and analyzing them.")
D3_CAA = Detect("D3_CAA")
D3_CAA.hasID.append("D3-CAA")
D3_CAA.hasName.append("Connection Attempt Analysis")
D3_CAA.hasDescription.append("Comparing client-server request and response payloads to a baseline profile to identify outliers.")  
D3_DNSTA = Detect("D3_DNSTA")
D3_DNSTA.hasID.append("D3-DNSTA")
D3_DNSTA.hasName.append("DNS Traffic Analysis")
D3_DNSTA.hasDescription.append("Analyzing failed connections in a network to detect unauthorized activity.")
D3_FC = Detect("D3_FC")
D3_FC.hasID.append("D3-FC")
D3_FC.hasName.append("File Carving")
D3_FC.hasDescription.append("Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host.")
D3_ISVA = Detect("D3_ISVA")
D3_ISVA.hasID.append("D3-ISVA")
D3_ISVA.hasName.append("Inbound Session Volume Analysis")
D3_ISVA.hasDescription.append("Identifying and extracting files from network application protocols through the use of network stream reassembly software.")
D3_IPCTA = Detect("D3_IPCTA")
D3_IPCTA.hasID.append("D3-IPCTA")
D3_IPCTA.hasName.append("IPC Traffic Analysis")
D3_IPCTA.hasDescription.append("Analyzing inbound network session or connection attempt volume.")
D3_NTCD = Detect("D3_NTCD")
D3_NTCD.hasID.append("D3-NTCD")
D3_NTCD.hasName.append("Network Traffic Community Deviation")
D3_NTCD.hasDescription.append("Analyzing standard inter process communication (IPC) protocols to detect deviations from normal protocol activity.")
D3_PHDURA = Detect("D3_PHDURA")
D3_PHDURA.hasID.append("D3-PHDURA")
D3_PHDURA.hasName.append("Per Host Download- Upload Ratio Analysis")
D3_PHDURA.hasDescription.append("Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication.")
D3_PMAD = Detect("D3_PMAD")
D3_PMAD.hasID.append("D3-PMAD")
D3_PMAD.hasName.append("Protocol Metadata Anomaly Detection")
D3_PMAD.hasDescription.append("Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host.")
D3_RPA = Detect("D3_RPA")
D3_RPA.hasID.append("D3-RPA")
D3_RPA.hasName.append("Relay Pattern Analysis")
D3_RPA.hasDescription.append("Collecting network communication protocol metadata and identifying statistical outliers.")
D3_RTSD = Detect("D3_RTSD")
D3_RTSD.hasID.append("D3-RTSD")
D3_RTSD.hasName.append("Remote Terminal Session Detection")
D3_RTSD.hasDescription.append("The detection of an internal host relaying traffic between the internal network and the external network.")
D3_RTA = Detect("D3_RTA")
D3_RTA.hasID.append("D3-RTA")
D3_RTA.hasName.append("RPC Traffic Analysis")
D3_RTA.hasDescription.append("Detection of an unauthorized remote live terminal console session by examining network traffic to a network host.")
D3_PM = Detect("D3_PM")
D3_PM.hasID.append("D3-PM")
D3_PM.hasName.append("Platform Monitoring")
D3_PM.hasDescription.append("Monitoring the activity of remote procedure calls in communication traffic to establish standard protocol operations and potential attacker activities.")
D3_FIM = Detect("D3_FIM")
D3_FIM.hasID.append("D3-FIM")
D3_FIM.hasName.append("File Integrity Monitoring")
D3_FIM.hasDescription.append("Monitoring platform components such as operating systems software, hardware devices, or firmware.")  
D3_FBA = Detect("D3_FBA")
D3_FBA.hasID.append("D3-FBA")
D3_FBA.hasName.append("Firmware Behavior Analysis")
D3_FBA.hasDescription.append("Detecting any suspicious changes to files in a computer system.")
D3_FV = Detect("D3_FV")
D3_FV.hasID.append("D3-FV")
D3_FV.hasName.append("Firmware Verification")
D3_FV.hasDescription.append("Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity.")
D3_FEMC = Detect("D3_FEMC")
D3_FEMC.hasID.append("D3-FEMC")
D3_FEMC.hasName.append("Firmware Embedded Monitoring Code")
D3_FEMC.hasDescription.append("Cryptographically verifying firmware integrity.")
D3_SFV = Detect("D3_SFV")
D3_SFV.hasID.append("D3-SFV")
D3_SFV.hasName.append("System Firmware Verification")
D3_SFV.hasDescription.append("Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data.")  
D3_OSM = Detect("D3_OSM")
D3_OSM.hasID.append("D3-OSM")
D3_OSM.hasName.append("Operating System Monitoring")
D3_OSM.hasDescription.append("Cryptographically verifying installed system firmware integrity.")
D3_EHB = Detect("D3_EHB")
D3_EHB.hasID.append("D3-EHB")
D3_EHB.hasName.append("Endpoint Health Beacon")
D3_EHB.hasDescription.append("The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute Operating System Monitoring.")
D3_IDA = Detect("D3_IDA")
D3_IDA.hasID.append("D3-IDA")
D3_IDA.hasName.append("Input Device Analysis")
D3_IDA.hasDescription.append("Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised.")
D3_MBT = Detect("D3_MBT")
D3_MBT.hasID.append("D3-MBT")
D3_MBT.hasName.append("Memory Boundary Tracking")
D3_MBT.hasDescription.append("Operating system level mechanisms to prevent abusive input device exploitation.")
D3_SJA = Detect("D3_SJA")
D3_SJA.hasID.append("D3-SJA")
D3_SJA.hasName.append("Scheduled Job Analysis")
D3_SJA.hasDescription.append("Analyzing a call stack for return addresses which point to unexpected memory locations.")
D3_SDM = Detect("D3_SDM")
D3_SDM.hasID.append("D3-SDM")
D3_SDM.hasName.append("System Daemon Monitoring")
D3_SDM.hasDescription.append("Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling.")
D3_SFA = Detect("D3_SFA")
D3_SFA.hasID.append("D3-SFA")
D3_SFA.hasName.append("System File Analysis")
D3_SFA.hasDescription.append("Tracking changes to the state or configuration of critical system level processes.")
D3_SBV = Detect("D3_SBV")
D3_SBV.hasID.append("D3-SBV")
D3_SBV.hasName.append("Service Binary Verification")
D3_SBV.hasDescription.append("Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering.")
D3_SICA = Detect("D3_SICA")
D3_SICA.hasID.append("D3-SICA")
D3_SICA.hasName.append("System Init Config Analysis")
D3_SICA.hasDescription.append("Analyzing changes in service binary files by comparing to a source of truth.")
D3_USICA = Detect("D3_USICA")
D3_USICA.hasID.append("D3-USICA")
D3_USICA.hasName.append("User Session Init Config Analysis")
D3_USICA.hasDescription.append("Analysis of any system process startup configuration.")
D3_PA = Detect("D3_PA")
D3_PA.hasID.append("D3-PA")
D3_PA.hasName.append("Process Analysis")
D3_PA.hasDescription.append("Analyzing modifications to user session config files such as .bashrc or .bash_profile.")
D3_DQSA = Detect("D3_DQSA")
D3_DQSA.hasID.append("D3-DQSA")
D3_DQSA.hasName.append("Database Query String Analysis")
D3_DQSA.hasDescription.append("Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations.")
D3_PCSV = Detect("D3_PCSV")
D3_PCSV.hasID.append("D3-PCSV")
D3_PCSV.hasName.append("Process Code Segment Verification")
D3_PCSV.hasDescription.append("Analyzing database queries to detect [SQL Injection]")
D3_PSMD = Detect("D3_PSMD")
D3_PSMD.hasID.append("D3-PSMD")
D3_PSMD.hasName.append("Process Self-Modification Detection")
D3_PSMD.hasDescription.append("Comparing the text or code memory segments to a source of truth.")
D3_PSA = Detect("D3_PSA")
D3_PSA.hasID.append("D3-PSA")
D3_PSA.hasName.append("Process Spawn Analysis")
D3_PSA.hasDescription.append("Detects processes that modify, change, or replace their own code at runtime.")
D3_PLA = Detect("D3_PLA")
D3_PLA.hasID.append("D3-PLA")
D3_PLA.hasName.append("Process Lineage Analysis")
D3_PLA.hasDescription.append("Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized.")    
D3_SSC = Detect("D3_SSC")
D3_SSC.hasID.append("D3-SSC")
D3_SSC.hasName.append("Shadow Stack Comparisons")
D3_SSC.hasDescription.append("Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors.")
D3_SCA = Detect("D3_SCA")
D3_SCA.hasID.append("D3-SCA")
D3_SCA.hasName.append("System Call Analysis")
D3_SCA.hasDescription.append("Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity.")
D3_FCA = Detect("D3_FCA")
D3_FCA.hasID.append("D3-FCA")
D3_FCA.hasName.append("File Creation Analysis")
D3_FCA.hasDescription.append("Analyzing system calls to determine whether a process is exhibiting unauthorized behavior.")
D3_UBA = Detect("D3_UBA")
D3_UBA.hasID.append("D3-UBA")
D3_UBA.hasName.append("User Behavior Analysis")
D3_UBA.hasDescription.append("Analyzing the properties of file create system call invocations.")
D3_ANET = Detect("D3_ANET")
D3_ANET.hasID.append("D3-ANET")
D3_ANET.hasName.append("Authentication Event Thresholding")
D3_ANET.hasDescription.append("User behavior analytics as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats.")
D3_AZET = Detect("D3_AZET")
D3_AZET.hasID.append("D3-AZET")
D3_AZET.hasName.append("Authorization Event Thresholding")
D3_AZET.hasDescription.append("Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile.")
D3_CCSA = Detect("D3_CCSA")
D3_CCSA.hasID.append("D3-CCSA")
D3_CCSA.hasName.append("Credential Compromise Scope Analysis")
D3_CCSA.hasDescription.append("Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile.")
D3_DAM = Detect("D3_DAM")
D3_DAM.hasID.append("D3-DAM")
D3_DAM.hasName.append("Domain Account Monitoring")
D3_DAM.hasDescription.append("Determining which credentials may have been compromised by analyzing the user logon history of a particular system.")
D3_JFAPA = Detect("D3_JFAPA")
D3_JFAPA.hasID.append("D3-JFAPA")
D3_JFAPA.hasName.append("Job Function Access Pattern Analysis")
D3_JFAPA.hasDescription.append("Monitoring the existence of or changes to Domain User Accounts.")
D3_LAM = Detect("D3_LAM")
D3_LAM.hasID.append("D3-LAM")
D3_LAM.hasName.append("Local Account Monitoring")
D3_LAM.hasDescription.append("Detecting anomalies in user access patterns by comparing user access activity to behavioral profiles that categorize users by role such as job title, function, department.")
D3_RAPA = Detect("D3_RAPA")
D3_RAPA.hasID.append("D3-RAPA")
D3_RAPA.hasName.append("Resource Access Pattern Analysis")
D3_RAPA.hasDescription.append("Analyzing local user accounts to detect unauthorized activity.")
D3_SDA = Detect("D3_SDA")
D3_SDA.hasID.append("D3-SDA")
D3_SDA.hasName.append("Session Duration Analysis")
D3_SDA.hasDescription.append("Analyzing the resources accessed by a user to identify unauthorized activity.")
D3_UGLPA = Detect("D3_UGLPA")
D3_UGLPA.hasID.append("D3-UGLPA")
D3_UGLPA.hasName.append("User Geolocation Logon Pattern Analysis")
D3_UGLPA.hasDescription.append("Analyzing the duration of user sessions in order to detect unauthorized activity.")
D3_CHN = Deceive("D3_CHN")
D3_CHN.hasID.append("D3-CHN")
D3_CHN.hasName.append("Connected Honeynet")
D3_CHN.hasDescription.append("A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system.")
D3_DE = Deceive("D3_DE")
D3_DE.hasID.append("D3-DE")
D3_DE.hasName.append("Decoy Environment")
D3_DE.hasDescription.append("A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker.")
D3_DF = Deceive("D3_DF")
D3_DF.hasID.append("D3-DF")
D3_DF.hasName.append("Decoy File")
D3_DF.hasDescription.append("A file created for the purposes of deceiving an adversary.")
D3_DNR = Deceive("D3_DNR")
D3_DNR.hasID.append("D3-DNR")
D3_DNR.hasName.append("Decoy Network Resource")
D3_DNR.hasDescription.append("Deploying a network resource for the purposes of deceiving an adversary.")
D3_DO = Deceive("D3_DO")
D3_DO.hasID.append("D3-DO")
D3_DO.hasName.append("Decoy Object")
D3_DO.hasDescription.append("A Decoy Object is created and deployed for the purposes of deceiving attackers.")
D3_DST = Deceive("D3_DST")
D3_DST.hasID.append("D3-DST")
D3_DST.hasName.append("Decoy Session Token")
D3_DST.hasDescription.append("An authentication token created for the purposes of deceiving an adversary.")
D3_DUC = Deceive("D3_DUC")
D3_DUC.hasID.append("D3-DUC")
D3_DUC.hasName.append("Decoy User Credential")
D3_DUC.hasDescription.append("A Credential created for the purpose of deceiving an adversary.")
D3_IHN = Deceive("D3_IHN")
D3_IHN.hasID.append("D3-IHN")
D3_IHN.hasName.append("Integrated Honeynet")
D3_IHN.hasDescription.append("The practice of setting decoys in a production environment to entice interaction from attackers.")   
D3_SHN = Deceive("D3_SHN")
D3_SHN.hasID.append("D3-SHN")
D3_SHN.hasName.append("Standalone Honeynet")
D3_SHN.hasDescription.append("An environment created for the purpose of attracting attackers and eliciting their behaviors that is not connected to any production enterprise systems.")
D3_AL = Evict("D3_AL")
D3_AL.hasID.append("D3-AL")
D3_AL.hasName.append("Account Locking")
D3_AL.hasDescription.append("The process of temporarily disabling user accounts on a system or domain.")
D3_ANCI = Evict("D3_ANCI")
D3_ANCI.hasID.append("D3-ANCI")
D3_ANCI.hasName.append("Authentication Cache Invalidation")
D3_ANCI.hasDescription.append("Removing tokens or credentials from an authentication cache to prevent further user associated account accesses.")
D3_CE = Evict("D3_CE")
D3_CE.hasID.append("D3-CE")
D3_CE.hasName.append("Credential Eviction")
D3_CE.hasDescription.append("Credential Eviction techniques disable or remove compromised credentials from a computer network.")   
D3_CR = Evict("D3_CR")
D3_CR.hasID.append("D3-CR")
D3_CR.hasName.append("Credential Revoking")
D3_CR.hasDescription.append("Deleting a set of credentials permanently to prevent them from being used to authenticate.")
D3_ER = Evict("D3_ER")
D3_ER.hasID.append("D3-ER")
D3_ER.hasName.append("Email Removal")
D3_ER.hasDescription.append("The email removal technique deletes email files from system storage.")
D3_FEV = Evict("D3_FEV")
D3_FEV.hasID.append("D3-FEV")
D3_FEV.hasName.append("File Eviction")
D3_FEV.hasDescription.append("File eviction techniques evict files from system storage.")
D3_FR = Evict("D3_FR")
D3_FR.hasID.append("D3-FR")
D3_FR.hasName.append("File Removal")
D3_FR.hasDescription.append("The file removal technique deletes malicious artifacts or programs from a computer system.")
D3_PE = Evict("D3_PE")
D3_PE.hasID.append("D3-PE")
D3_PE.hasName.append("Process Eviction")
D3_PE.hasDescription.append("Process eviction techniques terminate or remove running processes.")
D3_PS = Evict("D3_PS")
D3_PS.hasID.append("D3-PS")
D3_PS.hasName.append("Process Suspension")
D3_PS.hasDescription.append("Suspending a running process on a computer system.")
D3_PT = Evict("D3_PT")
D3_PT.hasID.append("D3-PT")
D3_PT.hasName.append("Process Termination")
D3_PT.hasDescription.append("Terminating a running application process on a computer system.")
D3_ACH = Harden("D3_ACH")
D3_ACH.hasID.append("D3-ACH")
D3_ACH.hasName.append("Application Configuration Hardening")
D3_ACH.hasDescription.append("Modifying an application's configuration to reduce its attack surface.")
D3_AH = Harden("D3_AH")
D3_AH.hasID.append("D3-AH")
D3_AH.hasName.append("Application Hardening")
D3_AH.hasDescription.append("Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary.")
D3_BAN = Harden("D3_BAN")
D3_BAN.hasID.append("D3-BAN")
D3_BAN.hasName.append("Biometric Authentication")
D3_BAN.hasDescription.append("Using biological measures in order to authenticate a user.")
D3_BA = Harden("D3_BA")
D3_BA.hasID.append("D3-BA")
D3_BA.hasName.append("Bootloader Authentication")
D3_BA.hasDescription.append("Cryptographically authenticating the bootloader software before system boot.")
D3_CH = Harden("D3_CH")
D3_CH.hasID.append("D3-CH")
D3_CH.hasName.append("Credential Hardening")
D3_CH.hasDescription.append("Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials.")
D3_CRO = Harden("D3_CRO")
D3_CRO.hasID.append("D3-CRO")
D3_CRO.hasName.append("Credential Rotation")
D3_CRO.hasDescription.append("Expiring an existing set of credentials and reissuing a new valid set.")
D3_CTS = Harden("D3_CTS")
D3_CTS.hasID.append("D3-CTS")
D3_CTS.hasName.append("Credential Transmission Scoping")
D3_CTS.hasDescription.append("Limiting the transmission of a credential to a scoped set of relying parties.")
D3_DENCR = Harden("D3_DENCR")
D3_DENCR.hasID.append("D3-DENCR")
D3_DENCR.hasName.append("Disk Encryption")
D3_DENCR.hasDescription.append("Encrypting a hard disk partition to prevent cleartext access to a file system.")
D3_DTP = Harden("D3_DTP")
D3_DTP.hasID.append("D3-DTP")
D3_DTP.hasName.append("Domain Trust Policy")
D3_DTP.hasDescription.append("Restricting inter-domain trust by modifying domain configuration.")
D3_FE = Harden("D3_FE")
D3_FE.hasID.append("D3-FE")
D3_FE.hasName.append("File Encryption")
D3_FE.hasDescription.append("Encrypting a file using a cryptographic key.")
D3_LFP = Harden("D3_LFP")
D3_LFP.hasID.append("D3-LFP")
D3_LFP.hasName.append("Local File Permissions")
D3_LFP.hasDescription.append("Restricting access to a local file by configuring operating system functionality.")
D3_MFA = Harden("D3_MFA")
D3_MFA.hasID.append("D3-MFA")
D3_MFA.hasName.append("Multi-factor Authentication")
D3_MFA.hasDescription.append("Requiring proof of two or more pieces of evidence in order to authenticate a user.")
D3_OTP = Harden("D3_OTP")
D3_OTP.hasID.append("D3-OTP")
D3_OTP.hasName.append("One-time Password")
D3_OTP.hasDescription.append("A one-time password is valid for only one user authentication.")
D3_PH = Harden("D3_PH")
D3_PH.hasID.append("D3-PH")
D3_PH.hasName.append("Platform Hardening")
D3_PH.hasDescription.append("Hardening components of a Platform with the intention of making them more difficult to exploit. Platforms include components such as BIOS UEFI Subsystems, Hardware security devices such as Trusted Platform Modules, Boot process logic or code, Kernel software components.")
D3_PSEP = Harden("D3_PSEP")
D3_PSEP.hasID.append("D3-PSEP")
D3_PSEP.hasName.append("Process Segment Execution Prevention")
D3_PSEP.hasDescription.append("Preventing execution of any address in a memory region other than the code segment.")
D3_SAOR = Harden("D3_SAOR")
D3_SAOR.hasID.append("D3-SAOR")
D3_SAOR.hasName.append("Segment Address Offset Randomization")
D3_SAOR.hasDescription.append("Randomizing the base (start) address of one or more segments of memory during the initialization of a process.")
D3_SU = Harden("D3_SU")
D3_SU.hasID.append("D3-SU")
D3_SU.hasName.append("Software Update")
D3_SU.hasDescription.append("Replacing old software on a computer system component.")
D3_SFCV = Harden("D3_SFCV")
D3_SFCV.hasID.append("D3-SFCV")
D3_SFCV.hasName.append("Stack Frame Canary Validation")
D3_SFCV.hasDescription.append("Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite.")
D3_SPP = Harden("D3_SPP")
D3_SPP.hasID.append("D3-SPP")
D3_SPP.hasName.append("Strong Password Policy")
D3_SPP.hasDescription.append("Modifying system configuration to increase password strength.")
D3_SCP = Harden("D3_SCP")
D3_SCP.hasID.append("D3-SCP")
D3_SCP.hasName.append("System Configuration Permissions")
D3_SCP.hasDescription.append("Restricting system configuration modifications to a specific user or group of users.")
D3_UAP = Harden("D3_UAP")
D3_UAP.hasID.append("D3-UAP")
D3_UAP.hasName.append("User Account Permissions")
D3_UAP.hasDescription.append("Restricting a user account's access to resources.")
D3_DNSAL = Isolate("D3_DNSAL")
D3_DNSAL.hasID.append("D3-DNSAL")
D3_DNSAL.hasName.append("DNS Allowlisting")
D3_DNSAL.hasDescription.append("Permitting only approved domains and their subdomains to be resolved.")
D3_DNSDL = Isolate("D3_DNSDL")
D3_DNSDL.hasID.append("D3-DNSDL")
D3_DNSDL.hasName.append("DNS Denylisting")
D3_DNSDL.hasDescription.append("Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type.")
D3_EF = Isolate("D3_EF")
D3_EF.hasID.append("D3-EF")
D3_EF.hasName.append("Email Filtering")
D3_EF.hasDescription.append("Filtering incoming email traffic based on specific criteria.")
D3_EAL = Isolate("D3_EAL")
D3_EAL.hasID.append("D3-EAL")
D3_EAL.hasName.append("Executable Allowlisting")
D3_EAL.hasDescription.append("Using a digital signature to authenticate a file before opening.")
D3_EDL = Isolate("D3_EDL")
D3_EDL.hasID.append("D3-EDL")
D3_EDL.hasName.append("Executable Denylisting")
D3_EDL.hasDescription.append("Blocking the execution of files on a host in accordance with defined application policy rules.")     
D3_EI = Isolate("D3_EI")
D3_EI.hasID.append("D3-EI")
D3_EI.hasName.append("Execution Isolation")
D3_EI.hasDescription.append("Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files.")
D3_FRDDL = Isolate("D3_FRDDL")
D3_FRDDL.hasID.append("D3-FRDDL")
D3_FRDDL.hasName.append("Forward Resolution Domain Denylisting")
D3_FRDDL.hasDescription.append("Blocking a lookup based on the query's domain name value.")
D3_HBPI = Isolate("D3_HBPI")
D3_HBPI.hasID.append("D3-HBPI")
D3_HBPI.hasName.append("Hardware-based Process Isolation")
D3_HBPI.hasDescription.append("Preventing one process from writing to the memory space of another process through hardware-based address manager implementations.")
D3_HDDL = Isolate("D3_HDDL")
D3_HDDL.hasID.append("D3-HDDL")
D3_HDDL.hasName.append("Hierarchical Domain Denylisting")
D3_HDDL.hasDescription.append("Blocking the resolution of any subdomain of a specified domain name.")
D3_HDL = Isolate("D3_HDL")
D3_HDL.hasID.append("D3-HDL")
D3_HDL.hasName.append("Homoglyph Denylisting")
D3_HDL.hasDescription.append("Blocking DNS queries that are deceptively similar to legitimate domain names.")
D3_ITF = Isolate("D3_ITF")
D3_ITF.hasID.append("D3-ITF")
D3_ITF.hasName.append("Inbound Traffic Filtering")
D3_ITF.hasDescription.append("Restricting network traffic originating from untrusted networks destined towards a private host or enclave.")
D3_IOPR = Isolate("D3_IOPR")
D3_IOPR.hasID.append("D3-IOPR")
D3_IOPR.hasName.append("IO Port Restriction")
D3_IOPR.hasDescription.append("Limiting access to computer input/output (IO) ports to restrict unauthorized devices.")
D3_KBPI = Isolate("D3_KBPI")
D3_KBPI.hasID.append("D3-KBPI")
D3_KBPI.hasName.append("Kernel-based Process Isolation")
D3_KBPI.hasDescription.append("Using kernel-level capabilities to isolate processes.")
D3_MAC = Isolate("D3_MAC")
D3_MAC.hasID.append("D3-MAC")
D3_MAC.hasName.append("Mandatory Access Control")
D3_MAC.hasDescription.append("Controlling access to local computer system resources with kernel-level capabilities.")
D3_NI = Isolate("D3_NI")
D3_NI.hasID.append("D3-NI")
D3_NI.hasName.append("Network Isolation")
D3_NI.hasDescription.append("Network Isolation techniques prevent network hosts from accessing non-essential system network resources.")
D3_NTF = Isolate("D3_NTF")
D3_NTF.hasID.append("D3-NTF")
D3_NTF.hasName.append("Network Traffic Filtering")
D3_NTF.hasDescription.append("Restricting network traffic originating from any location.")
D3_OTF = Isolate("D3_OTF")
D3_OTF.hasID.append("D3-OTF")
D3_OTF.hasName.append("Outbound Traffic Filtering")
D3_OTF.hasDescription.append("Restricting network traffic originating from a private host or enclave destined towards untrusted networks.")
D3_RRID = Isolate("D3_RRID")
D3_RRID.hasID.append("D3-RRID")
D3_RRID.hasName.append("Reverse Resolution IP Denylisting")
D3_RRID.hasDescription.append("Blocking a reverse lookup based on the query's IP address value.")
D3_SCF = Isolate("D3_SCF")
D3_SCF.hasID.append("D3-SCF")
D3_SCF.hasName.append("System Call Filtering")
D3_SCF.hasDescription.append("Configuring a kernel to use an allow or deny list to filter kernel API calls.")
D3_AM = Model("D3_AM")
D3_AM.hasID.append("D3-AM")
D3_AM.hasName.append("Access Modeling")
D3_AM.hasDescription.append("Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems.")
D3_ALLM = Model("D3_ALLM")
D3_ALLM.hasID.append("D3-ALLM")
D3_ALLM.hasName.append("Active Logical Link Mapping")
D3_ALLM.hasDescription.append("Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connections.")
D3_APLM = Model("D3_APLM")
D3_APLM.hasID.append("D3-APLM")
D3_APLM.hasName.append("Active Physical Link Mapping")
D3_APLM.hasDescription.append("Active physical link mapping sends and receives network traffic as a means to map the physical layer.")
D3_AI = Model("D3_AI")
D3_AI.hasID.append("D3-AI")
D3_AI.hasName.append("Asset Inventory")
D3_AI.hasDescription.append("Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities.")
D3_AVE = Model("D3_AVE")
D3_AVE.hasID.append("D3-AVE")
D3_AVE.hasName.append("Asset Vulnerability Enumeration")
D3_AVE.hasDescription.append("Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities.")
D3_CI = Model("D3_CI")
D3_CI.hasID.append("D3-CI")
D3_CI.hasName.append("Configuration Inventory")
D3_CI.hasDescription.append("Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization.")
D3_DI = Model("D3_DI")
D3_DI.hasID.append("D3-DI")
D3_DI.hasName.append("Data Inventory")
D3_DI.hasDescription.append("Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture.")
D3_HCI = Model("D3_HCI")
D3_HCI.hasID.append("D3-HCI")
D3_HCI.hasName.append("Hardware Component Inventory")
D3_HCI.hasDescription.append("Hardware component inventorying identifies and records the hardware items in the organization's architecture.")
D3_LLM = Model("D3_LLM")
D3_LLM.hasID.append("D3-LLM")
D3_LLM.hasName.append("Logical Link Mapping")
D3_LLM.hasDescription.append("Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata.")
D3_NM = Model("D3_NM")
D3_NM.hasID.append("D3-NM")
D3_NM.hasName.append("Network Mapping")
D3_NM.hasDescription.append("Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network.")
D3_NNI = Model("D3_NNI")
D3_NNI.hasID.append("D3-NNI")
D3_NNI.hasName.append("Network Node Inventory")
D3_NNI.hasDescription.append("Network node inventorying identifies and records all the network nodes (hosts, routers, switches, firewalls, etc.) in the organization's architecture.")
D3_NTPM = Model("D3_NTPM")
D3_NTPM.hasID.append("D3-NTPM")
D3_NTPM.hasName.append("Network Traffic Policy Mapping")
D3_NTPM.hasDescription.append("Network traffic policy mapping identifies and models the allowed pathways of data at the network, transport, and/or application levels.")
D3_OAM = Model("D3_OAM")
D3_OAM.hasID.append("D3-OAM")
D3_OAM.hasName.append("Operational Activity Mapping")
D3_OAM.hasDescription.append("Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities.")
D3_PLLM = Model("D3_PLLM")
D3_PLLM.hasID.append("D3-PLLM")
D3_PLLM.hasName.append("Passive Logical Link Mapping")
D3_PLLM.hasDescription.append("Passive logical link mapping only listens to network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connections.")
D3_PLM = Model("D3_PLM")
D3_PLM.hasID.append("D3-PLM")
D3_PLM.hasName.append("Physical Link Mapping")
D3_PLM.hasDescription.append("Physical link mapping identifies and models the link connectivity of the network devices within a physical network.")
D3_SWI = Model("D3_SWI")
D3_SWI.hasID.append("D3-SWI")
D3_SWI.hasName.append("Software Inventory")
D3_SWI.hasDescription.append("Software inventorying identifies and records the software items in the organization's architecture.")
D3_SYSM = Model("D3_SYSM")
D3_SYSM.hasID.append("D3-SYSM")
D3_SYSM.hasName.append("System Mapping")
D3_SYSM.hasDescription.append("System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located.")
D3_SYSVA = Model("D3_SYSVA")
D3_SYSVA.hasID.append("D3-SYSVA")
D3_SYSVA.hasName.append("System Vulnerability Assessment")
D3_SYSVA.hasDescription.append("System vulnerability assessment relates all the vulnerabilities of a system's components in the context of their configuration and internal dependencies and can also include assessing risk emerging from the system's design as a whole, not just the sum of individual component vulnerabilities.")
D3_RC = Restore("D3_RC")
D3_RC.hasID.append("D3-RC")
D3_RC.hasName.append("Reissue Credential")
D3_RC.hasDescription.append("Issue a new credential to a user which supersedes their old credential.")
D3_RA = Restore("D3_RA")
D3_RA.hasID.append("D3-RA")
D3_RA.hasName.append("Restore Access")
D3_RA.hasDescription.append("Restoring an entity's access to resources.")
D3_RCF = Restore("D3_RCF")
D3_RCF.hasID.append("D3-RCF")
D3_RCF.hasName.append("Restore Configuration")
D3_RCF.hasDescription.append("Restoring a software configuration.")
D3_RD = Restore("D3_RD")
D3_RD.hasID.append("D3-RD")
D3_RD.hasName.append("Restore Database")
D3_RD.hasDescription.append("Restoring the data in a database.")
D3_RE = Restore("D3_RE")
D3_RE.hasID.append("D3-RE")
D3_RE.hasName.append("Restore Email")
D3_RE.hasDescription.append("Restoring an email for an entity to access.")
D3_RF = Restore("D3_RF")
D3_RF.hasID.append("D3-RF")
D3_RF.hasName.append("Restore File")
D3_RF.hasDescription.append("Restoring a file for an entity to access.")
D3_RNA = Restore("D3_RNA")
D3_RNA.hasID.append("D3-RNA")
D3_RNA.hasName.append("Restore Network Access")
D3_RNA.hasDescription.append("Restoring an entity's access to a computer network.")
D3_RO = Restore("D3_RO")
D3_RO.hasID.append("D3-RO")
D3_RO.hasName.append("Restore Object")
D3_RO.hasDescription.append("Restoring an object for an entity to access. This is the broadest class for object restoration.")     
D3_RS = Restore("D3_RS")
D3_RS.hasID.append("D3-RS")
D3_RS.hasName.append("Restore Software")
D3_RS.hasDescription.append("Restoring software to a host.")
D3_RUAA = Restore("D3_RUAA")
D3_RUAA.hasID.append("D3-RUAA")
D3_RUAA.hasName.append("Restore User Account Access")
D3_RUAA.hasDescription.append("Restoring a user account's access to resources.")
D3_ULA = Restore("D3_ULA")
D3_ULA.hasID.append("D3-ULA")
D3_ULA.hasName.append("Unlock Account")
D3_ULA.hasDescription.append("Restoring a user account's access to resources by unlocking a locked User Account.")
D3_FA.hasType.append("Detect")
D3_DA.hasType.append("Detect")
D3_EFA.hasType.append("Detect")
D3_FCOA.hasType.append("Detect")
D3_FCR.hasType.append("Detect")
D3_FH.hasType.append("Detect")
D3_ID.hasType.append("Detect")
D3_HD.hasType.append("Detect")
D3_IAA.hasType.append("Detect")
D3_IRA.hasType.append("Detect")
D3_URA.hasType.append("Detect")
D3_UA.hasType.append("Detect")
D3_MA.hasType.append("Detect")
D3_SMRA.hasType.append("Detect")
D3_SRA.hasType.append("Detect")
D3_NTA.hasType.append("Detect")
D3_ANAA.hasType.append("Detect")
D3_CA.hasType.append("Detect")
D3_ACA.hasType.append("Detect")
D3_PCA.hasType.append("Detect")
D3_CSPP.hasType.append("Detect")
D3_CAA.hasType.append("Detect")
D3_DNSTA.hasType.append("Detect")
D3_FC.hasType.append("Detect")
D3_ISVA.hasType.append("Detect")
D3_IPCTA.hasType.append("Detect")
D3_NTCD.hasType.append("Detect")
D3_PHDURA.hasType.append("Detect")
D3_PMAD.hasType.append("Detect")
D3_RPA.hasType.append("Detect")
D3_RTSD.hasType.append("Detect")
D3_RTA.hasType.append("Detect")
D3_PM.hasType.append("Detect")
D3_FIM.hasType.append("Detect")
D3_FBA.hasType.append("Detect")
D3_FV.hasType.append("Detect")
D3_FEMC.hasType.append("Detect")
D3_SFV.hasType.append("Detect")
D3_OSM.hasType.append("Detect")
D3_EHB.hasType.append("Detect")
D3_IDA.hasType.append("Detect")
D3_MBT.hasType.append("Detect")
D3_SJA.hasType.append("Detect")
D3_SDM.hasType.append("Detect")
D3_SFA.hasType.append("Detect")
D3_SBV.hasType.append("Detect")
D3_SICA.hasType.append("Detect")
D3_USICA.hasType.append("Detect")
D3_PA.hasType.append("Detect")
D3_DQSA.hasType.append("Detect")
D3_PCSV.hasType.append("Detect")
D3_PSMD.hasType.append("Detect")
D3_PSA.hasType.append("Detect")
D3_PLA.hasType.append("Detect")
D3_SSC.hasType.append("Detect")
D3_SCA.hasType.append("Detect")
D3_FCA.hasType.append("Detect")
D3_UBA.hasType.append("Detect")
D3_ANET.hasType.append("Detect")
D3_AZET.hasType.append("Detect")
D3_CCSA.hasType.append("Detect")
D3_DAM.hasType.append("Detect")
D3_JFAPA.hasType.append("Detect")
D3_LAM.hasType.append("Detect")
D3_RAPA.hasType.append("Detect")
D3_SDA.hasType.append("Detect")
D3_UGLPA.hasType.append("Detect")
D3_CHN.hasType.append("Deceive")
D3_DE.hasType.append("Deceive")
D3_DF.hasType.append("Deceive")
D3_DNR.hasType.append("Deceive")
D3_DO.hasType.append("Deceive")
D3_DST.hasType.append("Deceive")
D3_DUC.hasType.append("Deceive")
D3_IHN.hasType.append("Deceive")
D3_SHN.hasType.append("Deceive")
D3_AL.hasType.append("Evict")
D3_ANCI.hasType.append("Evict")
D3_CE.hasType.append("Evict")
D3_CR.hasType.append("Evict")
D3_ER.hasType.append("Evict")
D3_FEV.hasType.append("Evict")
D3_FR.hasType.append("Evict")
D3_PE.hasType.append("Evict")
D3_PS.hasType.append("Evict")
D3_PT.hasType.append("Evict")
D3_ACH.hasType.append("Harden")
D3_AH.hasType.append("Harden")
D3_BAN.hasType.append("Harden")
D3_BA.hasType.append("Harden")
D3_CH.hasType.append("Harden")
D3_CRO.hasType.append("Harden")
D3_CTS.hasType.append("Harden")
D3_DENCR.hasType.append("Harden")
D3_DTP.hasType.append("Harden")
D3_FE.hasType.append("Harden")
D3_LFP.hasType.append("Harden")
D3_MFA.hasType.append("Harden")
D3_OTP.hasType.append("Harden")
D3_PH.hasType.append("Harden")
D3_PSEP.hasType.append("Harden")
D3_SAOR.hasType.append("Harden")
D3_SU.hasType.append("Harden")
D3_SFCV.hasType.append("Harden")
D3_SPP.hasType.append("Harden")
D3_SCP.hasType.append("Harden")
D3_UAP.hasType.append("Harden")
D3_DNSAL.hasType.append("Isolate")
D3_DNSDL.hasType.append("Isolate")
D3_EF.hasType.append("Isolate")
D3_EAL.hasType.append("Isolate")
D3_EDL.hasType.append("Isolate")
D3_EI.hasType.append("Isolate")
D3_FRDDL.hasType.append("Isolate")
D3_HBPI.hasType.append("Isolate")
D3_HDDL.hasType.append("Isolate")
D3_HDL.hasType.append("Isolate")
D3_ITF.hasType.append("Isolate")
D3_IOPR.hasType.append("Isolate")
D3_KBPI.hasType.append("Isolate")
D3_MAC.hasType.append("Isolate")
D3_NI.hasType.append("Isolate")
D3_NTF.hasType.append("Isolate")
D3_OTF.hasType.append("Isolate")
D3_RRID.hasType.append("Isolate")
D3_SCF.hasType.append("Isolate")
D3_AM.hasType.append("Model")
D3_ALLM.hasType.append("Model")
D3_APLM.hasType.append("Model")
D3_AI.hasType.append("Model")
D3_AVE.hasType.append("Model")
D3_CI.hasType.append("Model")
D3_DI.hasType.append("Model")
D3_HCI.hasType.append("Model")
D3_LLM.hasType.append("Model")
D3_NM.hasType.append("Model")
D3_NNI.hasType.append("Model")
D3_NTPM.hasType.append("Model")
D3_OAM.hasType.append("Model")
D3_PLLM.hasType.append("Model")
D3_PLM.hasType.append("Model")
D3_SWI.hasType.append("Model")
D3_SYSM.hasType.append("Model")
D3_SYSVA.hasType.append("Model")
D3_RC.hasType.append("Restore")
D3_RA.hasType.append("Restore")
D3_RCF.hasType.append("Restore")
D3_RD.hasType.append("Restore")
D3_RE.hasType.append("Restore")
D3_RF.hasType.append("Restore")
D3_RNA.hasType.append("Restore")
D3_RO.hasType.append("Restore")
D3_RS.hasType.append("Restore")
D3_RUAA.hasType.append("Restore")
D3_ULA.hasType.append("Restore")